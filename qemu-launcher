#!/usr/bin/env bash

# scriptDir="$(realpath --canonicalize-missing "${BASH_SOURCE[0]}/..")"
storageDir="$HOME/.local/share/qemu-launcher"

#@formatter:off
tmuxPaneOrTerminal(){ # {{{
    if hyprctl activewindow | grep --quiet tmux ; then
        tmux new-window "$2";
    else
        if [[ "$3" ]]; then
            $1 -c "$3" -e "$2";
        else
            $1 -e "$2";
        fi
    fi
} # }}}

maxRam="$(( $(grep --extended-regexp "MemTotal" /proc/meminfo | sed --expression='s/[^0-9]//g') / (1024 * 1024) ))"
logialCores="$(grep -i --extended-regexp -c '^processor' /proc/cpuinfo)"
ramSize="$(( maxRam / 2 ))G"
cpuCores="$(( logialCores / 2 ))"

changeQemuRam(){ # {{{
    echo "$(
        echo -en "$(
            for (( i = 1; i <= maxRam; i++)) do
                echo -n $i "Gibibytes of RAM\n"
            done
        )"\
        |
        fuzzel\
            --dmenu\
            --lines 7\
            --width 30\
            --tabs 4\
            --background \#110015e6\
            --text-color \#EE70FFff\
            --font 'Hack Nerd Font:size=15'\
            --border-color \#ff00ffff\
            --selection-color \#420080ff\
            --border-width 2\
            --border-radius 15\
        |
        grep -oE '^[0-9]+'
    )G"
} # }}}

changeQemuCpu(){ # {{{
    echo -en "$(
        for (( i = 1; i <= logialCores; i++)) do
            echo -n $i "core\n"
        done
    )"\
    |
    fuzzel\
        --dmenu\
        --lines 7\
        --width 30\
        --tabs 4\
        --background \#110015e6\
        --text-color \#EE70FFff\
        --font 'Hack Nerd Font:size=15'\
        --border-color \#ff00ffff\
        --selection-color \#420080ff\
        --border-width 2\
        --border-radius 15\
    |
    grep -oE '^[0-9]+'
} # }}}

launchQemu(){ #{{{
    executeCommand="qemu-system-x86_64\
        -enable-kvm\
        -m \"\$ramSize\"\
        -cpu host\
        -smp \"\$cpuCores\"\
        -net nic\
        -net user,hostfwd=tcp::10022-:22\
        -drive file=\"\$1\"\
        -vga virtio\
        -display gtk,gl=on"

    [[ -n $2 ]] && executeCommand="${executeCommand} -cdrom \"\$2\" -boot order=d"

    eval "$executeCommand"
} #}}}

declare -A settings=( # {{{
    [" Memory"]="ramSize=\"\$(changeQemuRam)\""
    [" Cpu"]="cpuCores=\"\$(changeQemuCpu)\""
) # }}}

changeQemuSettings(){ # {{{
    chosen="$(echo -en "$(
        for item in "${!settings[@]}"; do
            echo -n "$item" "\n";
        done
    )"\
        |
    fuzzel\
        --dmenu\
        --lines 2\
        --width 15\
        --tabs 4\
        --background \#110015e6\
        --text-color \#EE70FFff\
        --font 'Hack Nerd Font:size=15'\
        --border-color \#ff00ffff\
        --selection-color \#420080ff\
        --border-width 2\
        --border-radius 15\
    |
    sed 's/.$//'
    )"

    [[ -n $chosen ]] && eval "${settings["$chosen"]}"

} # }}}

createQemuImage(){ # {{{
    if [[ ! -f "$1" ]]; then
        echo "latest drive not found"
        qemu-img create -f qcow2 "$2" "$(
            echo -en "$(
                for (( i = 1; i<= 30; i++))  do
                    echo -n "$i G\n";
                done
            )"\
            |
            fuzzel\
                --dmenu\
                --lines 10\
                --width 35\
                --tabs 4\
                --background \#110015e6\
                --text-color \#EE70FFff\
                --font 'Hack Nerd Font:size=15'\
                --border-color \#ff00ffff\
                --selection-color \#420080ff\
                --border-width 2\
                --border-radius 15\
                --prompt "$2 size: "\
            |
            grep -oE '^[0-9]+'
        )G"
        ln -sf "$2" "$1"
    fi

} # }}}

installAlpineIso(){ # {{{
    if [[ ! -f "$storageDir/images/alpine-virt-latest.iso" ]] ; then
        echo "alpine not found"
        wget\
            --no-use-server-timestamps\
            --directory-prefix="$storageDir/storage"\
            "$(
                curl https://alpinelinux.org/downloads/\
                |
                grep -E 'alpine-virt\S+-x86_64.iso"'\
                |
                sed -E 's/.+href="//; s/".+//; s/\&#x2F;/\//g'
            )"

        fileName=$(ls -t "$storageDir/storage" | head -n1)
        ln -sf "$storageDir/storage/$fileName" "$storageDir/images/alpine-virt-latest.iso"
    fi
} # }}}

launchAlpineInstaller(){ # {{{
    installAlpineIso
    createQemuImage "$storageDir/images/alpine-virt-latest-drive.img" "$storageDir/storage/alpine-virt-latest-drive.img"
    launchQemu "$storageDir/images/alpine-virt-latest-drive.img" "$storageDir/images/alpine-virt-latest.iso"
} # }}}

launchAlpine(){ # {{{
    if [[ ! -f "$storageDir/images/alpine-virt-latest-drive.img" ]] ; then
        launchAlpineInstaller
        exit 0;
    fi
    launchQemu "$storageDir/images/alpine-virt-latest-drive.img"
} # }}}

installGentooIso(){ # {{{
    if [[ ! -f "$storageDir/images/gentoo-latest.iso" ]] ; then
        echo "gentoo not found"
        wget\
            --no-use-server-timestamps\
            --directory-prefix="$storageDir/storage"\
            "$(
                curl https://www.gentoo.org/downloads/\
                |
                grep -oE 'https://\S+install-amd64-minimal\S+.iso'\
                |
                head -n1
            )"

        fileName=$(ls -t "$storageDir/storage" | head -n1)
        ln -sf "$storageDir/storage/$fileName" "$storageDir/images/gentoo-latest.iso"
    fi
} # }}}

launchGentooInstaller(){ # {{{
    installGentooIso
    createQemuImage "$storageDir/images/gentoo-latest-drive.img" "$storageDir/storage/gentoo-latest-drive.img"
    launchQemu "$storageDir/images/gentoo-latest-drive.img" "$storageDir/images/gentoo-latest.iso"
} # }}}

launchGentoo(){ # {{{
    if [[ ! -f "$storageDir/images/gentoo-latest-drive.img" ]] ; then
        launchGentooInstaller
        exit 0;
    fi
    launchQemu "$storageDir/images/gentoo-latest-drive.img"
} # }}}

installNixIso(){ # {{{
    if [[ ! -f "$storageDir/images/nix-latest.iso" ]] ; then
        echo "nix not found"
        wget\
            --no-use-server-timestamps\
            --directory-prefix="$storageDir/storage"\
            "$(
                curl https://nixos.org/download/\
                |
                grep -oE 'https://\S+latest-nixos-minimal-x86_64-linux\.iso'\
                |
                head -n1
            )"

        fileName=$(ls -t "$storageDir/storage" | head -n1)
        ln -sf "$storageDir/storage/$fileName" "$storageDir/images/nix-latest.iso"
    fi
} # }}}

launchNixInstaller(){ # {{{
    installNixIso
    createQemuImage "$storageDir/images/nix-latest-drive.img" "$storageDir/storage/nix-latest-drive.img"
    launchQemu "$storageDir/images/nix-latest-drive.img" "$storageDir/images/nix-latest.iso"
} # }}}

launchNix(){ # {{{
    if [[ ! -f "$storageDir/images/nix-latest-drive.img" ]] ; then
        launchNixInstaller
        exit 0;
    fi
    launchQemu "$storageDir/images/nix-latest-drive.img"
} # }}}

installArchIso(){ # {{{
    # https://geo.mirror.pkgbuild.com/iso/2025.05.01/archlinux-2025.05.01-x86_64.iso
    if [[ ! -f "$storageDir/images/arch-latest.iso" ]] ; then
        echo "arch not found"
        downloadLink="$(curl https://archlinux.org/download/ | grep -oE 'https://geo\.mirror\.pkgbuild\.com/iso/\S+/')"
        wget\
            --no-use-server-timestamps\
            --directory-prefix="$storageDir/storage"\
            "${downloadLink}$(
                curl "$downloadLink"\
                    |
                grep -oE 'archlinux-[0-9]+.+x86_64.iso'\
                |
                head -n1\
                |
                sed -E 's/".+//'
            )"

        fileName=$(ls -t "$storageDir/storage" | head -n1)
        ln -sf "$storageDir/storage/$fileName" "$storageDir/images/arch-latest.iso"
    fi
} # }}}

launchArchInstaller(){ # {{{
    installArchIso
    createQemuImage "$storageDir/images/arch-latest-drive.img" "$storageDir/storage/arch-latest-drive.img"
    launchQemu "$storageDir/images/arch-latest-drive.img" "$storageDir/images/arch-latest.iso"
} # }}}

launchArch(){ # {{{
    if [[ ! -f "$storageDir/images/arch-latest-drive.img" ]] ; then
        launchArchInstaller
        exit 0;
    fi
    launchQemu "$storageDir/images/arch-latest-drive.img"
} # }}}

declare -A menusAndCommands=( # {{{
    [" Arch linux installer; Gui"]="launchArchInstaller"
    [" Arch linux; Gui"]="launchArch"
    ["󱄅 NixOS installer; GUI"]="launchNixInstaller"
    ["󱄅 NixOS; GUI"]="launchNix"
    [" Alpine installer; GUI"]="launchAlpineInstaller"
    [" Alpine; GUI"]="launchAlpine"
    [" Gentoo installer; GUI"]="launchGentooInstaller"
    [" Gentoo; GUI"]="launchGentoo"
    [" Settings"]="changeQemuSettings "
) # }}}

startQemu(){ # {{{
    chosen="$(
        echo -en "$(
            for item in "${!menusAndCommands[@]}"; do
                echo -n "$item" "\n";
            done
        )"\
        |
        fuzzel\
            --dmenu\
            --lines 10\
            --width 35\
            --tabs 4\
            --background \#110015e6\
            --text-color \#EE70FFff\
            --font 'Hack Nerd Font:size=15'\
            --border-color \#ff00ffff\
            --selection-color \#420080ff\
            --border-width 2\
            --border-radius 15\
            --prompt "RAM: $ramSize CORES: $cpuCores => "\
        |
        sed 's/.$//'
    )"
} # }}}

[[ ! -d "$storageDir/images" ]] && mkdir --parents "$storageDir/images"
[[ ! -d "$storageDir/storage" ]] && mkdir --parents "$storageDir/storage"

while true; do # {{{
    startQemu
    if [[ -n "$chosen" ]]; then
        if [[ "$chosen" == " Settings" ]]; then
            changeQemuSettings
        else
            eval "${menusAndCommands["$chosen"]}"
            exit 0
        fi
    else
        exit 0
    fi
done # }}}
