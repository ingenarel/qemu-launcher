#!/usr/bin/env bash

# scriptDir="$(realpath --canonicalize-missing "${BASH_SOURCE[0]}/..")"
storageDir="$HOME/.local/share/qemu-launcher"

#@formatter:off

pickMenu(){ # {{{
    [[ -z $QEMU_LAUNCHER_MENU ]] && {
        [[ -n $WAYLAND_DISPLAY ]] && {
            command -v fuzzel >/dev/null 2>&1 && {
                QEMU_LAUNCHER_MENU="fuzzel --dmenu"
            } || {
            command -v tofi >/dev/null 2>&1 && {
                QEMU_LAUNCHER_MENU="tofi"
            } || {
            command -v rofi >/dev/null 2>&1 && {
                QEMU_LAUNCHER_MENU="rofi"
            } || {
            command - wofi >/dev/null 2>&1 && {
                QEMU_LAUNCHER_MENU="wofi"
            }; }; }; }
        } || {
            command -v fzf >/dev/null 2>&1 && {
                QEMU_LAUNCHER_MENU="fzf"
            }
        }
    }
    eval "$QEMU_LAUNCHER_MENU" "$@"
} # }}}

maxRam="$(( $(grep --extended-regexp "MemTotal" /proc/meminfo | sed --expression='s/[^0-9]//g') / (1024 * 1024) ))" # {{{
logialCores="$(grep -i --extended-regexp -c '^processor' /proc/cpuinfo)"
ramSize="$(( maxRam / 2 ))G"
cpuCores="$(( logialCores / 2 ))" # }}}

changeQemuRam(){ # {{{
    echo "$(
        echo -en "$(
            for (( i = 1; i <= maxRam; i++)) do
                echo -n $i "Gibibytes of RAM\n"
            done
        )"\
        |
        pickMenu "$@"\
        |
        grep -oE '^[0-9]+'
    )G"
} # }}}

changeQemuCpu(){ # {{{
    echo -en "$(
        for (( i = 1; i <= logialCores; i++)) do
            echo -n $i "core\n"
        done
    )"\
    |
    pickMenu "$@"\
    |
    grep -oE '^[0-9]+'
} # }}}

launchQemu(){ #{{{
    qemuHostPort="10022"
    executeCommand="qemu-system-x86_64\
        -enable-kvm\
        -m \"\$ramSize\"\
        -cpu host\
        -smp \"\$cpuCores\"\
        -net nic\
        -net user,hostfwd=tcp::$qemuHostPort-:22\
        -drive file=\"\$1\""

    [[ -n $2 ]] && executeCommand="${executeCommand} -cdrom \"\$2\" -boot order=d"

    if [[ -z $3 || $3 == "gui" ]]; then
        eval "${executeCommand} -vga virtio -display gtk,gl=on"
    # elif [[ $3 == "ssh" ]]; then
    #     sshCommand="ssh -t $USER@localhost -p$qemuHostPort 'tmux' || ( ssh-keygen -R '[localhost]:$qemuHostPort' && ssh -t $USER@localhost -p$qemuHostPort 'tmux' )"
    #     if pgrep -f "qemu.+$1"; then
    #         tmuxPaneOrTerminal "kitty" "$sshCommand"
    #     else
    #         eval "${executeCommand} -vga none -display none" & tmuxPaneOrTerminal "kitty" "$sshCommand"
    #     fi
    elif [[ $3 == "qemu-TUI" ]]; then
        local mountDir="$storageDir/mounts/$(echo "$2" | grep -oE '[^/]+$')"
        local password="$(pickMenu --prompt="Password: ")"
        echo "$password" | sudo -S mount --onlyonce --mkdir "$2" "$mountDir"
        [[ -n "$2" ]] && {
            echo "$2" | grep -E "arch" && {
                executeCommand+=" -kernel $mountDir$(
                    sed\
                        --quiet\
                        -E "s/^linux\s*(.)/\1/p"\
                        $mountDir/loader/entries/01-archiso-x86_64-linux.conf)\
                -initrd $mountDir$(
                    sed\
                        --quiet\
                        -E "s/^initrd\s*(.)/\1/p"\
                        $mountDir/loader/entries/01-archiso-x86_64-linux.conf)\
                -append '$(
                    sed\
                        --quiet\
                        -E "s/^options\s*(.)/\1/p"\
                        $mountDir/loader/entries/01-archiso-x86_64-linux.conf
                    ) console=ttyS0' -nographic"
            } || { echo "$2" | grep -E "gentoo" && {
                executeCommand+=" -kernel $mountDir$(
                    sed\
                        --quiet\
                        -E "s/^\s*linux\s*(\S+).+/\1/p"\
                        $mountDir/boot/grub/grub.cfg | head -n1)\
                -initrd $mountDir$(
                    sed\
                        --quiet\
                        -E "s/^\s*initrd\s*(.+)/\1/p"\
                        $mountDir/boot/grub/grub.cfg | head -n1)\
                -append '$(
                    sed\
                        --quiet\
                        -E "s/^\s*linux\s*\S+\s*(.+)/\1/p"\
                        $mountDir/boot/grub/grub.cfg | head -n1
                    ) console=ttyS0' -nographic"
            };}
        }
        eval "$executeCommand"
        sudo -S umount "$mountDir"
    fi
} #}}}

declare -A settings=( # {{{
    [" Memory"]="ramSize=\"\$(changeQemuRam)\""
    [" Cpu"]="cpuCores=\"\$(changeQemuCpu)\""
) # }}}

changeQemuSettings(){ # {{{
    chosen="$(echo -en "$(
        for item in "${!settings[@]}"; do
            echo -n "$item" "\n";
        done
    )"\
    |
        pickMenu "$@"\
    |
        sed 's/.$//'
    )"

    [[ -n $chosen ]] && eval "${settings["$chosen"]}"

} # }}}

createQemuImage(){ # {{{
    if [[ ! -f "$1" ]]; then
        echo "latest drive not found"
        qemu-img create -f qcow2 "$1" "$(
            echo -en "$(
                for (( i = 1; i<= 30; i++))  do
                    echo -n "$i G\n";
                done
            )"\
            |
            pickMenu\
            |
            grep -oE '^[0-9]+'
        )G"
    fi

} # }}}

installAlpineIso(){ # {{{
    if [[ ! -f "$storageDir/isos/alpine-virt-latest.iso" ]] ; then
        echo "alpine not found"
        wget\
            --no-use-server-timestamps\
            --directory-prefix="$storageDir/isos"\
            "$(
                curl https://alpinelinux.org/downloads/\
                |
                grep -E 'alpine-virt\S+-x86_64.iso"'\
                |
                sed -E 's/.+href="//; s/".+//; s/\&#x2F;/\//g'
            )"

        fileName=$(ls -t "$storageDir/isos" | head -n1)
        mv "$storageDir/isos/$fileName" "$storageDir/isos/alpine-virt-latest.iso"
    fi
} # }}}

launchAlpineInstaller(){ # {{{
    installAlpineIso
    createQemuImage "$storageDir/images/alpine-virt-latest-drive.img"
    [[ -z $1 || $1 == "gui" ]] && {
        launchQemu "$storageDir/images/alpine-virt-latest-drive.img" "$storageDir/isos/alpine-virt-latest.iso"
    } || { [[ $1 == "qemu-TUI" ]] && {
        launchQemu "$storageDir/images/alpine-virt-latest-drive.img" "$storageDir/isos/alpine-virt-latest.iso" "qemu-TUI"
    };}
} # }}}

launchAlpine(){ # {{{
    [[ ! -f "$storageDir/images/alpine-virt-latest-drive.img" ]] && {
        launchAlpineInstaller
        exit 0;
    }
    [[ -z $1 || $1 == "gui" ]] && {
        launchQemu "$storageDir/images/alpine-virt-latest-drive.img"
    } || { [[ $1 == "qemu-TUI" ]] && {
        launchQemu "$storageDir/images/alpine-virt-latest-drive.img" "" "qemu-TUI"
    };}
} # }}}

installGentooIso(){ # {{{
    [[ ! -f "$storageDir/isos/gentoo-latest.iso" ]] && {
        echo "gentoo not found"
        wget\
            --no-use-server-timestamps\
            --directory-prefix="$storageDir/isos"\
            "$(
                curl https://www.gentoo.org/downloads/\
                |
                grep -oE 'https://\S+install-amd64-minimal\S+.iso'\
                |
                head -n1
            )"

        fileName=$(ls -t "$storageDir/isos" | head -n1)
        mv "$storageDir/isos/$fileName" "$storageDir/isos/gentoo-latest.iso"
    }
} # }}}

launchGentooInstaller(){ # {{{
    installGentooIso
    createQemuImage "$storageDir/images/gentoo-latest-drive.img"
    [[ -z $1 || $1 == "gui" ]] && {
        launchQemu "$storageDir/images/gentoo-latest-drive.img" "$storageDir/isos/gentoo-latest.iso"
    } || { [[ $1 == "qemu-TUI" ]] && {
        launchQemu "$storageDir/images/gentoo-latest-drive.img" "$storageDir/isos/gentoo-latest.iso" "qemu-TUI"
    };}
} # }}}

launchGentoo(){ # {{{
    [[ ! -f "$storageDir/images/gentoo-latest-drive.img" ]] && {
        launchGentooInstaller
        exit 0;
    }
    [[ -z $1 || $1 == "gui" ]] && {
        launchQemu "$storageDir/images/gentoo-latest-drive.img"
    } || { [[ $1 == "qemu-TUI" ]] && {
        launchQemu "$storageDir/images/gentoo-latest-drive.img" "" "qemu-TUI"
    };}
} # }}}

installNixIso(){ # {{{
    [[ ! -f "$storageDir/isos/nix-latest.iso" ]] && {
        echo "nix not found"
        wget\
            --no-use-server-timestamps\
            --directory-prefix="$storageDir/isos"\
            "$(
                curl https://nixos.org/download/\
                |
                grep -oE 'https://\S+latest-nixos-minimal-x86_64-linux\.iso'\
                |
                head -n1
            )"

        fileName=$(ls -t "$storageDir/isos" | head -n1)
        mv "$storageDir/isos/$fileName" "$storageDir/isos/nix-latest.iso"
    }
} # }}}

launchNixInstaller(){ # {{{
    installNixIso
    createQemuImage "$storageDir/images/nix-latest-drive.img"
    [[ -z $1 || $1 == "gui" ]] && {
        launchQemu "$storageDir/images/nix-latest-drive.img" "$storageDir/isos/nix-latest.iso"
    } || { [[ $1 == "qemu-TUI" ]] && {
        launchQemu "$storageDir/images/nix-latest-drive.img" "$storageDir/isos/nix-latest.iso" "qemu-TUI"
    };}
} # }}}

launchNix(){ # {{{
    [[ ! -f "$storageDir/images/nix-latest-drive.img" ]] && {
        launchNixInstaller
        exit 0;
    }
    [[ -z $1 || $1 == "gui" ]] && {
        launchQemu "$storageDir/images/nix-latest-drive.img"
    } || { [[ $1 == "qemu-TUI" ]] && {
        launchQemu "$storageDir/images/nix-latest-drive.img" "" "qemu-TUI"
    };}
} # }}}

installArchIso(){ # {{{
    # https://geo.mirror.pkgbuild.com/iso/2025.05.01/archlinux-2025.05.01-x86_64.iso
    [[ ! -f "$storageDir/isos/arch-latest.iso" ]] && {
        echo "arch not found"
        downloadLink="$(curl https://archlinux.org/download/ | grep -oE 'https://geo\.mirror\.pkgbuild\.com/iso/\S+/')"
        wget\
            --no-use-server-timestamps\
            --directory-prefix="$storageDir/isos"\
            "${downloadLink}$(
                curl "$downloadLink"\
                    |
                grep -oE 'archlinux-[0-9]+.+x86_64.iso'\
                |
                head -n1\
                |
                sed -E 's/".+//'
            )"

        fileName=$(ls -t "$storageDir/isos" | head -n1)
        mv "$storageDir/isos/$fileName" "$storageDir/isos/arch-latest.iso"
    }
} # }}}

launchArchInstaller(){ # {{{
    installArchIso
    createQemuImage "$storageDir/images/arch-latest-drive.img"
    [[ -z $1 || $1 == "gui" ]] && {
        launchQemu "$storageDir/images/arch-latest-drive.img" "$storageDir/isos/arch-latest.iso"
    } || { [[ $1 == "qemu-TUI" ]] && {
        launchQemu "$storageDir/images/arch-latest-drive.img" "$storageDir/isos/arch-latest.iso" "qemu-TUI"
    };}
} # }}}

launchArch(){ # {{{
    [[ ! -f "$storageDir/images/arch-latest-drive.img" ]] && {
        launchArchInstaller
        exit 0;
    }
    [[ -z $1 || $1 == "gui" ]] && {
        launchQemu "$storageDir/images/arch-latest-drive.img"
    } || { [[ $1 == "qemu-TUI" ]] && {
        launchQemu "$storageDir/images/arch-latest-drive.img" "" "qemu-TUI"
    };}
} # }}}

declare -A menusAndCommands=( # {{{
    [" Arch linux installer; GUI"]="launchArchInstaller"
    [" Arch linux installer; qemu-TUI"]="launchArchInstaller qemu-TUI"

    [" Arch linux; Gui"]="launchArch"
    [" Arch linux; qemu-TUI"]="launchArch qemu-TUI"

    ["󱄅 NixOS installer; GUI"]="launchNixInstaller"
    ["󱄅 NixOS installer; qemu-TUI"]="launchNixInstaller qemu-TUI"

    ["󱄅 NixOS; GUI"]="launchNix"
    ["󱄅 NixOS; qemu-TUI"]="launchNix qemu-TUI"


    [" Alpine installer; GUI"]="launchAlpineInstaller"
    [" Alpine installer; qemu-TUI"]="launchAlpineInstaller qemu-TUI"

    [" Alpine; GUI"]="launchAlpine"
    [" Alpine; qemu-TUI"]="launchAlpine qemu-TUI"


    [" Gentoo installer; GUI"]="launchGentooInstaller"
    [" Gentoo installer; qemu-TUI"]="launchGentooInstaller qemu-TUI"

    [" Gentoo; GUI"]="launchGentoo"
    [" Gentoo; qemu-TUI"]="launchGentoo qemu-TUI"


    [" Settings"]="changeQemuSettings "
) # }}}

startQemu(){ # {{{
    chosen="$(
        echo -en "$(
            for item in "${!menusAndCommands[@]}"; do
                echo -n "$item" "\n";
            done
        )"\
        |
        pickMenu "$@"\
        |
        sed 's/.$//'
    )"
} # }}}

[[ ! -d "$storageDir/images" ]] && mkdir --parents "$storageDir/images"
[[ ! -d "$storageDir/isos" ]] && mkdir --parents "$storageDir/isos"

while true; do # {{{
    startQemu "$@"
    [[ -n "$chosen" ]] && {
        [[ "$chosen" == " Settings" ]] && {
            changeQemuSettings
        } || {
            eval "${menusAndCommands["$chosen"]}"
            exit 0
        }
    } || {
        exit 0
    }
done # }}}
